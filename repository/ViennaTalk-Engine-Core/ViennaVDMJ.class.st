Class {
	#name : #ViennaVDMJ,
	#superclass : #ViennaEngine,
	#instVars : [
		'process',
		'reader',
		'writer',
		'lock'
	],
	#classVars : [
		'GlobalLock',
		'RandomGenerator',
		'Registry'
	],
	#category : 'ViennaTalk-Engine-Core'
}

{ #category : #'copyright notice' }
ViennaVDMJ class >> aboutJson4VDMJ [
	^ 'ViennaVDMJ uses Json4VDMJ, a JSON wrapper on VDMJ. 
	Please note that Json4VDMJ is derrived from VDMJ and 
	Json4VDMJ is copyrighted and licensed independent of ViennaTalk. 
	Please visit the link below and the copyright notice for details.

Json4VDMJ homepage: https://github.com/tomooda/Json4VDMJ
/*******************************************************************************
 *
 *	Copyright (C) 2008-2013 Fujitsu Services Ltd.
 *
 *	Author: Nick Battle
 *
 *	VDMJ is free software: you can redistribute it and/or modify
 *	it under the terms of the GNU General Public License as published by
 *	the Free Software Foundation, either version 3 of the License, or
 *	(at your option) any later version.
 *
 *	VDMJ is distributed in the hope that it will be useful,
 *	but WITHOUT ANY WARRANTY; without even the implied warranty of
 *	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *	GNU General Public License for more details.
 *
 *	You should have received a copy of the GNU General Public License
 *	along with VDMJ.  If not, see .
 *
 ******************************************************************************/
/*******************************************************************************
 * Modified and Merged to Json4VDMJ by Tomohiro Oda, 2015
 *
 *	Json4VDMJ is free software: you can redistribute it and/or modify
 *	it under the terms of the GNU General Public License as published by
 *	the Free Software Foundation, either version 3 of the License, or
 *	(at your option) any later version.
 *
 *	Json4VDMJ is distributed in the hope that it will be useful,
 *	but WITHOUT ANY WARRANTY; without even the implied warranty of
 *	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *	GNU General Public License for more details.
 *
 *	You should have received a copy of the GNU General Public License
 *	along with Json4VDMJ.  If not, see <http://www.gnu.org/licenses/>.
 *
 ******************************************************************************/'
]

{ #category : #'copyright notice' }
ViennaVDMJ class >> aboutVDMJ [
	^ 'ViennaVDMJ uses VDMJ as an execution engine. 
Please note that VDMJ is copyrighted and licensed independent of ViennaTalk. 
Please visit the link below and the copyright notice for details.

VDMJ homepage: https://github.com/nickbattle/vdmj
/*******************************************************************************
 *
 *	Copyright (C) 2008-2013 Fujitsu Services Ltd.
 *
 *	Author: Nick Battle
 *
 *	VDMJ is free software: you can redistribute it and/or modify
 *	it under the terms of the GNU General Public License as published by
 *	the Free Software Foundation, either version 3 of the License, or
 *	(at your option) any later version.
 *
 *	VDMJ is distributed in the hope that it will be useful,
 *	but WITHOUT ANY WARRANTY; without even the implied warranty of
 *	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *	GNU General Public License for more details.
 *
 *	You should have received a copy of the GNU General Public License
 *	along with VDMJ.  If not, see .
 *
 ******************************************************************************/'
]

{ #category : #'instance creation' }
ViennaVDMJ class >> bank: anInteger [
	| bank |
	bank := ViennaBankEngine new.
	anInteger timesRepeat: [ bank add: self new ].
	^ bank
]

{ #category : #utilities }
ViennaVDMJ class >> basicInstallJars [
	| http |
	http := ZnClient new.
	http
		beOneShot;
		https;
		followRedirects: true;
		get: self vdmjUrl.
	http response code = 200
		ifTrue: [ self vdmjPath binaryWriteStream
				nextPutAll: http entity bytes;
				close ].
	http := ZnClient new.
	http
		beOneShot;
		https;
		followRedirects: true;
		get: self json4vdmjUrl.
	http response code = 200
		ifTrue: [ self json4vdmjPath binaryWriteStream
				nextPutAll: http entity bytes;
				close ]
]

{ #category : #locking }
ViennaVDMJ class >> globalLock [
	^ GlobalLock ifNil: [ GlobalLock := Semaphore forMutualExclusion ]
]

{ #category : #locking }
ViennaVDMJ class >> globalLock: aBlock [
	self globalLock critical: [ ^ aBlock value ]
]

{ #category : #'class initialization' }
ViennaVDMJ class >> initialize [
	super initialize.
	Smalltalk addToStartUpList: self.
	Smalltalk isHeadless
		ifFalse: [ self install ]
]

{ #category : #'class initialization' }
ViennaVDMJ class >> install [
	self vdmjPath exists
		ifFalse: [ self
				installVDMJ;
				installJson4VDMJ ].
	self json4vdmjPath exists
		ifFalse: [ self installJson4VDMJ ].
	self jsonicPath exists
		ifFalse: [ self installJsonic ]
]

{ #category : #'class initialization' }
ViennaVDMJ class >> installJson4VDMJ [
	"ViennaVDMJ installJson4VDMJ"

	(self proceed: 'Do you want to download Json4VDMJ?' title: 'Installing Json4VDMJ')
		ifTrue: [ 
			(self proceed: self aboutJson4VDMJ title: 'Json4VDMJ Copyright Notice')
				ifTrue: [ 
					| http |
					http := ZnClient new.
					http
						beOneShot;
						https;
						followRedirects: true;
						get: self json4vdmjUrl.
					http response code = 200
						ifFalse: [ 
							UIManager default
								abort: 'Failed to download Json4VDMJ. Please download from http://vdmpad.viennatalk.org/Json4VDMJ.jar .'.
							^ nil ].
					self json4vdmjPath binaryWriteStream
						nextPutAll: http entity bytes;
						close ] ]
]

{ #category : #'class initialization' }
ViennaVDMJ class >> installJsonic [
	"ViennaVDMJ installJsonic"

	(FileSystem workingDirectory / 'jsonic-1.0.5.jar') binaryWriteStream
		nextPutAll: self jsonicJar;
		close
]

{ #category : #'class initialization' }
ViennaVDMJ class >> installVDMJ [
	"ViennaVDMJ installVDMJ"

	(self proceed: 'Do you want to download VDMJ?' title: 'Installing VDMJ')
		ifTrue: [ 
			(self proceed: self aboutVDMJ title: 'VDMJ Copyright Notice')
				ifTrue: [ 
					| http |
					http := ZnClient new.
					http
						beOneShot;
						https;
						followRedirects: true;
						get: self vdmjUrl.
					http response code = 200
						ifFalse: [ 
							UIManager default
								abort:
									'Failed to download VDMJ. Please download from https://github.com/nickbattle/vdmj/releases and place it at $PHARO/Contents/Resources/ .'.
							^ nil ].
					self vdmjPath binaryWriteStream
						nextPutAll: http entity bytes;
						close ] ]
]

{ #category : #testing }
ViennaVDMJ class >> isInstalled [
	^ self vdmjPath exists and: [ self json4vdmjPath exists and: [ self jsonicPath exists ] ]
]

{ #category : #accessing }
ViennaVDMJ class >> javaPath [
	^ '/usr/bin/java'
]

{ #category : #accessing }
ViennaVDMJ class >> json4vdmjPath [
	^ FileSystem workingDirectory / 'Json4VDMJ.jar'
]

{ #category : #resources }
ViennaVDMJ class >> json4vdmjUrl [
	^ 'http://vdmpad.viennatalk.org/Json4VDMJ.jar' asUrl
]

{ #category : #resources }
ViennaVDMJ class >> jsonicJar [
	^ ZnBase64Encoder new decode: ''
]

{ #category : #accessing }
ViennaVDMJ class >> jsonicPath [
	^ FileSystem workingDirectory / 'jsonic-1.0.5.jar'
]

{ #category : #'instance creation' }
ViennaVDMJ class >> new [
	self isInstalled
		ifFalse: [ self install.
			self isInstalled
				ifFalse: [ ^ self error: 'ViennaVDMJ requires VDMJ, Json4VDMJ and jsonic.' ] ].
	^ super new
]

{ #category : #utilities }
ViennaVDMJ class >> proceed: aText title: aString [
	| dialog |
	dialog := ProceedDialogWindow newWithTheme: UIManager default theme.
	dialog title: aString.
	dialog textFont: TextStyle default defaultFont.
	dialog text: aText asText.
	dialog textMorph contents removeAttribute: TextAlignment centered.
	dialog textMorph height > 600
		ifTrue: [ 
			"dialog textMorph delete.
		dialog textMorph autoFit: false.
		dialog textMorph height: 600."
			dialog textMorph owner
				addMorphBack:
					((dialog newScrollPaneFor: dialog textMorph)
						extent: (dialog textMorph width + 100) @ 600;
						yourself) ].
	^ (UIManager default openModal: dialog) cancelled not
]

{ #category : #utilities }
ViennaVDMJ class >> random [
	^ RandomGenerator ifNil: [ RandomGenerator := Random new ]
]

{ #category : #registry }
ViennaVDMJ class >> register: aViennaVDMJ [
	(self registry includes: self)
		ifFalse: [ self registry add: aViennaVDMJ ].
	^ aViennaVDMJ
]

{ #category : #registry }
ViennaVDMJ class >> registry [
	^ Registry ifNil: [Registry := WeakRegistry new]
]

{ #category : #'class initialization' }
ViennaVDMJ class >> startUp: resume [
	Smalltalk isHeadless
		ifFalse: [ self install ]
]

{ #category : #registry }
ViennaVDMJ class >> unregister: aViennaVDMJ [
	^ self registry remove: aViennaVDMJ ifAbsent: []
]

{ #category : #accessing }
ViennaVDMJ class >> vdmjPath [
	^ FileSystem workingDirectory / 'vdmj-3.2.0.jar'
]

{ #category : #resources }
ViennaVDMJ class >> vdmjUrl [
	^ 'http://vdmpad.viennatalk.org/vdmj-3.2.0.jar' asUrl
]

{ #category : #finalizing }
ViennaVDMJ >> actAsExecutor [
	lock := nil
]

{ #category : #commands }
ViennaVDMJ >> assign: aDictionary ifError: errorBlock [ 
	aDictionary
		ifNotEmpty: [| statement |
			statement := String new writeStream.
			statement nextPutAll: 's atomic('.
			aDictionary keys asArray
				do: [:var | statement nextPutAll: var;
						 nextPutAll: ':=';
						
						nextPutAll: (aDictionary at: var)]
				separatedBy: [statement nextPut: $;].
			statement nextPut: $).
			^ self
				send: statement contents
				responseDo: [:unit | unit]
				ifError: errorBlock]
]

{ #category : #commands }
ViennaVDMJ >> classicIfError: errorBlock [ 
	^ self
		send: 'classic'
		responseDo: [:unit | unit]
		ifError: errorBlock
]

{ #category : #accessing }
ViennaVDMJ >> close [
	process
		ifNotNil: [ :p | 
			process := nil.
			[ p sigterm.
			p sigkill.
			p terminate ]
				on: Error
				do: [ :ex |  ] ].
	reader
		ifNotNil: [ :r | 
			reader := nil.
			r close ].
	writer
		ifNotNil: [ :w | 
			writer := nil.
			w close ].
	self unregister
]

{ #category : #commands }
ViennaVDMJ >> default: aString ifError: errorBlock [
	^ self
		send: 'default ' , aString
		responseDo: [ :module | module ]
		ifError: [ 
			aString = 'DEFAULT'
				ifTrue: [ aString ]
				ifFalse: [ errorBlock value ] ]
]

{ #category : #commands }
ViennaVDMJ >> disableRuntimeCheckingIfError: errorBlock [ 
	^ self
		send: '-rtc'
		responseDo: [:unit | unit]
		ifError: errorBlock
]

{ #category : #commands }
ViennaVDMJ >> enableRuntimeCheckingIfError: errorBlock [ 
	^ self
		send: '+rtc'
		responseDo: [:unit | unit]
		ifError: errorBlock
]

{ #category : #private }
ViennaVDMJ >> ensureStartupProcess [
	(reader isNil
			or: [reader closed
					or: [process isNil
							or: [process isRunning not]]])
		ifTrue: [self startupProcess]
]

{ #category : #evaluating }
ViennaVDMJ >> evaluate: expression specification: specification states: states module: moduleName vdm10: vdm10 rtc: rtc [
	lock
		critical: [ 
			| errorMessage hasModules value postState |
			self ensureStartupProcess.
			self
				temporaryFileDo: [ :name :stream | 
					stream nextPutAll: specification.
					stream close.
					vdm10 = true
						ifTrue: [ 
							self
								vdm10IfError: [ :msg | 
									^ {nil.
									states.
									msg} ] ]
						ifFalse: [ 
							self
								classicIfError: [ :msg | 
									^ {nil.
									states.
									msg} ] ].
					rtc = true
						ifTrue: [ 
							self
								enableRuntimeCheckingIfError: [ :msg | 
									^ {nil.
									states.
									msg} ] ]
						ifFalse: [ 
							self
								disableRuntimeCheckingIfError: [ :msg | 
									^ {nil.
									states.
									msg} ] ].
					self
						load: name
						ifError: [ :msg | 
							^ {nil.
							states.
							msg} ] ].
			errorMessage := String new writeStream.
			hasModules := false.
			self
				modulesDo: [ :module | 
					states
						at: module
						ifPresent: [ :bindings | 
							| initBindings |
							hasModules := true.
							self
								default: module
								ifError: [ :msg | 
									^ {nil.
									states.
									msg} ].
							initBindings := Dictionary new.
							self
								statesDo: [ :var :val | initBindings at: var put: (bindings at: var ifAbsent: [ val ]) ]
								ifError: [ :msg | 
									^ {nil.
									states.
									msg} ].
							self
								assign: initBindings
								ifError: [ :msg | 
									errorMessage
										nextPutAll: msg;
										cr ] ] ]
				ifError: [ :msg | 
					^ {nil.
					states.
					msg} ].
			self
				default: moduleName
				ifError: [ :msg | 
					^ {nil.
					states.
					msg} ].
			errorMessage contents
				ifNotEmpty: [ :msg | 
					^ {nil.
					states.
					msg} ].
			value := expression
				ifEmpty: [ String new ]
				ifNotEmpty: [ 
					self
						print: expression
						ifError: [ :msg | 
							^ {nil.
							states.
							msg} ] ].
			postState := Dictionary new.
			self
				modulesDo: [ :module | 
					| bindings |
					postState at: module put: (bindings := Dictionary new).
					self
						default: module
						ifError: [ :msg | 
							^ {nil.
							states.
							msg} ].
					self
						statesDo: [ :var :val | bindings at: var put: val ]
						ifError: [ :msg | 
							^ {nil.
							states.
							msg} ] ]
				ifError: [ :msg | 
					^ {nil.
					states.
					msg} ].
			^ {value.
			postState.
			(String new)} ]
]

{ #category : #finalizing }
ViennaVDMJ >> finalize [
	self close
]

{ #category : #private }
ViennaVDMJ >> forkProcess [
	^ OSSUnixSubprocess new
		command: self javaPath;
		arguments:
			{'-Dfile.encoding=whatever'.
			'-Xss2m'.
			'-jar'.
			(self json4vdmjPath fullName convertToEncoding: 'utf-8')};
		redirectStdout;
		redirectStderr;
		redirectStdin;
		run;
		yourself
]

{ #category : #locking }
ViennaVDMJ >> globalLock: aBlockClosure [ 
	^ self class globalLock: aBlockClosure
]

{ #category : #'initialize-release' }
ViennaVDMJ >> initialize [
	super initialize.
	lock := Semaphore forMutualExclusion
]

{ #category : #accessing }
ViennaVDMJ >> javaPath [
	^ self class javaPath
]

{ #category : #accessing }
ViennaVDMJ >> json4vdmjPath [
	^ self class json4vdmjPath
]

{ #category : #commands }
ViennaVDMJ >> load: aString ifError: errorBlock [ 
	^ self
		send: 'load ' , aString
		responseDo: [:filename | filename]
		ifError: errorBlock
]

{ #category : #commands }
ViennaVDMJ >> modulesDo: aBlock ifError: errorBlock [ 
	^ self
		send: 'modules'
		responseDo: [:modules | modules do: aBlock]
		ifError: errorBlock
]

{ #category : #commands }
ViennaVDMJ >> print: aString ifError: errorBlock [ 
	^ self
		send: 'print ' , (aString copyReplaceAll: String cr with: String space) 
		responseDo: [:filename | filename]
		ifError: errorBlock
]

{ #category : #private }
ViennaVDMJ >> random [
	^ self class random
]

{ #category : #registry }
ViennaVDMJ >> register [
	self class register: self
]

{ #category : #communicating }
ViennaVDMJ >> send: aString responseDo: aBlock ifError: errorBlock [
	| semaphore response readerProcess |
	(reader next: 1024) ifNotEmpty: [:str | Transcript cr; show: str].
	writer nextPutAll: ((aString copyReplaceAll: String lf with: '\n') convertToEncoding: 'utf-8').
	writer nextPut: Character lf.
	writer flush.
	semaphore := Semaphore new.
	response := String new writeStream.
	readerProcess := [[reader next
				ifNil: ["(Delay forMilliseconds: 5) wait."Processor yield.
					true]
				ifNotNil: [:char | char = Character lf
						ifTrue: [semaphore signal.
							false]
						ifFalse: [response nextPut: char.
							true]]] whileTrue]
				forkAt: Processor userBackgroundPriority.
	^ (semaphore waitTimeoutMSecs: 10000)
		ifTrue: [readerProcess terminate.
			self close.
			self startupProcess.
			errorBlock value: 'Time out']
		ifFalse: [response := NeoJSONReader
						fromString: (response contents convertFromEncoding: 'utf-8').
			(response first = true
				ifTrue: [aBlock]
				ifFalse: [errorBlock])
				value: response second]
]

{ #category : #private }
ViennaVDMJ >> setProcess: anExternalProcess [
	process := anExternalProcess
]

{ #category : #private }
ViennaVDMJ >> setReader: aPipe [
	reader := aPipe
]

{ #category : #private }
ViennaVDMJ >> setWriter: aPipe [
	writer := aPipe
]

{ #category : #private }
ViennaVDMJ >> startupProcess [
	self class vdmjPath exists
		ifFalse: [ self class
				installVDMJ;
				installJson4VDMJ ].
	self class json4vdmjPath exists
		ifFalse: [ self class installJson4VDMJ ].
	self class jsonicPath exists
		ifFalse: [ self class installJsonic ].
	process := self forkProcess.
	reader := process stdoutStream.
	writer := process stdinStream.
	self register
]

{ #category : #commands }
ViennaVDMJ >> statesDo: aBlock ifError: errorBlock [
	^ self
		send: 'state'
		responseDo: [ :stateDict | 
			stateDict
				keysAndValuesDo: [ :var :value | 
					(value beginsWithEmpty: 'mk_' , var , '(' caseSensitive: true)
						ifFalse: [ aBlock value: var value: value ] ] ]
		ifError: errorBlock
]

{ #category : #private }
ViennaVDMJ >> temporaryFileDo: aBlock [
	| random file stream |
	random := self random.
	self
		globalLock: [ 
			[ 
			file := FileSystem workingDirectory / 'VDMPad-spec-'
				, (String withAll: ((1 to: 8) collect: [ :i | '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ' at: (random nextInt: 36) ]))
				, '.vdm'.
			file exists ] whileTrue.
			stream := file writeStream.
			[ aBlock value: file fullName value: stream ]
				ensure: [ 
					stream close.
					file deleteIfAbsent: [  ] ] ]
]

{ #category : #registry }
ViennaVDMJ >> unregister [
	self class unregister: self
]

{ #category : #commands }
ViennaVDMJ >> vdm10IfError: errorBlock [ 
	^ self
		send: 'vdm10'
		responseDo: [:unit | unit]
		ifError: errorBlock
]

{ #category : #accessing }
ViennaVDMJ >> vdmjPath [
	^ self class vdmjPath
]
